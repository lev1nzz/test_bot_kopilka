import os
from dotenv import load_dotenv
load_dotenv()

import sqlite3
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

DB_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'savings_bot.db')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        join_date TEXT
    )''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–ø–∏–ª–æ–∫ (–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π)
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS savings (
        user_id INTEGER PRIMARY KEY,
        balance REAL DEFAULT 0,
        monthly_contribution REAL DEFAULT 0,
        FOREIGN KEY (user_id) REFERENCES users(user_id)
    )''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–≥–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS debts (
        debt_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount REAL,
        due_date TEXT,
        status TEXT DEFAULT 'active',
        creation_date TEXT,
        FOREIGN KEY (user_id) REFERENCES users(user_id)
    )''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –≤–∑–Ω–æ—Å–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS contributions (
        contribution_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount REAL,
        month_year TEXT,
        contribution_date TEXT,
        FOREIGN KEY (user_id) REFERENCES users(user_id)
    )''')
    
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è /start
def add_user(user_id, username, first_name, last_name):
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute('SELECT 1 FROM users WHERE user_id = ?', (user_id,))
    if not cursor.fetchone():
        cursor.execute('''
        INSERT INTO users (user_id, username, first_name, last_name, join_date)
        VALUES (?, ?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        
        cursor.execute('''
        INSERT INTO savings (user_id, balance, monthly_contribution)
        VALUES (?, 0, 0)
        ''', (user_id,))
        
        conn.commit()
    
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    add_user(user.id, user.username, user.first_name, user.last_name)
    
    keyboard = [
        [KeyboardButton("üëÄ –ú–æ–π –±–∞–ª–∞–Ω—Å"), KeyboardButton("üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å")],
        [KeyboardButton("üéØ –í–Ω–µ—Å—Ç–∏ –≤ –∫–æ–ø–∏–ª–∫—É"), KeyboardButton("üí∏ –ú–æ–∏ –≤–∑–Ω–æ—Å—ã")],
        [KeyboardButton("üç™ –í–∑—è—Ç—å –≤ –¥–æ–ª–≥"), KeyboardButton("üîî –ú–æ–∏ –¥–æ–ª–≥–∏")],
        [KeyboardButton("üí™ –í–µ—Ä–Ω—É—Ç—å –¥–æ–ª–≥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∫–æ–ø–∏–ª–∫–∏ –ß–ï–õ–û–í.\n"
        "üì≤ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º
def get_user_balance(user_id):
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT balance FROM savings WHERE user_id = ?', (user_id,))
    balance = cursor.fetchone()[0]
    conn.close()
    return balance

def get_total_balance():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT SUM(balance) FROM savings')
    total = cursor.fetchone()[0] or 0
    conn.close()
    return total

def my_balance(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT balance, monthly_contribution FROM savings WHERE user_id = ?', (user_id,))
    balance, monthly_contribution = cursor.fetchone()
    conn.close()
    
    update.message.reply_text(
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f}\n"
        f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å: {monthly_contribution:.2f}"
    )

def total_balance(update: Update, context: CallbackContext):
    total = get_total_balance()
    update.message.reply_text(f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total:.2f}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ø–∏–ª–∫–æ–π
def add_contribution(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ß—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –≤ –∫–æ–ø–∏–ª–∫—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "'–≤–Ω–æ—à—É [—Å—É–º–º–∞] –∑–∞ [–º–º.–≥–≥–≥–≥]'\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–≤–Ω–æ—à—É 3000 –∑–∞ 07.2023'\n"
        "–ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å:\n"
        "'—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∑–Ω–æ—Å [—Å—É–º–º–∞]'\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∑–Ω–æ—Å 3000'"
    )

def my_contributions(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT amount, month_year, contribution_date FROM contributions 
    WHERE user_id = ?
    ORDER BY contribution_date DESC
    LIMIT 10
    ''', (user_id,))
    
    contributions = cursor.fetchall()
    
    cursor.execute('SELECT monthly_contribution FROM savings WHERE user_id = ?', (user_id,))
    monthly_contribution = cursor.fetchone()[0]
    
    conn.close()
    
    message = f"–í–∞—à —Ç–µ–∫—É—â–∏–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å: {monthly_contribution:.2f}\n\n"
    message += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤–∑–Ω–æ—Å–æ–≤:\n"
    
    if not contributions:
        message += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∑–Ω–æ—Å–æ–≤."
    else:
        for amount, month_year, contribution_date in contributions:
            message += (
                f"{amount:.2f} –∑–∞ {month_year} (–≤–Ω–µ—Å–µ–Ω–æ {contribution_date.split()[0]})\n"
            )
    
    update.message.reply_text(message)

def process_contribution(update: Update, user_id: int, text: str):
    try:
        if text.startswith('—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∑–Ω–æ—Å'):
            amount = float(text.split()[2])
            conn = sqlite3.connect(DB_PATH, check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute('UPDATE savings SET monthly_contribution = ? WHERE user_id = ?', (amount, user_id))
            conn.commit()
            conn.close()
            update.message.reply_text(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å: {amount:.2f}")
        elif '–∑–∞' in text:
            parts = text.split()
            amount = float(parts[1])
            month_year_index = parts.index('–∑–∞') + 1
            month_year = parts[month_year_index]
            
            month, year = map(int, month_year.split('.'))
            if not (1 <= month <= 12 and year >= 2020):
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
            
            conn = sqlite3.connect('savings_bot.db', check_same_thread=False)
            cursor = conn.cursor()
            
            cursor.execute('''
            INSERT INTO contributions (user_id, amount, month_year, contribution_date)
            VALUES (?, ?, ?, ?)
            ''', (user_id, amount, month_year, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
            
            cursor.execute('UPDATE savings SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
            
            conn.commit()
            conn.close()
            
            update.message.reply_text(
                f"–í—ã –≤–Ω–µ—Å–ª–∏ {amount:.2f} –∑–∞ {month_year}. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_balance(user_id):.2f}"
            )
    except (ValueError, IndexError) as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        update.message.reply_text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä—ã:\n"
            "'–≤–Ω–æ—à—É 3000 –∑–∞ 07.2023'\n"
            "'—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∑–Ω–æ—Å 3000'"
        )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–ª–≥–∞–º–∏
def borrow_money(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ß—Ç–æ–±—ã –≤–∑—è—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –¥–æ–ª–≥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "'–±–µ—Ä—É [—Å—É–º–º–∞] –¥–æ [–¥–¥.–º–º]'\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–±–µ—Ä—É 500 –¥–æ 15.07'"
    )

def return_debt(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –¥–æ–ª–≥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "'–≤–æ–∑–≤—Ä–∞—â–∞—é [—Å—É–º–º–∞] –∑–∞ [–¥–¥.–º–º]'\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–≤–æ–∑–≤—Ä–∞—â–∞—é 500 –∑–∞ 15.07'"
    )

def my_debts(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    conn = sqlite3.connect('savings_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT amount, due_date, creation_date FROM debts 
    WHERE user_id = ? AND status = 'active'
    ORDER BY due_date
    ''', (user_id,))
    
    debts = cursor.fetchall()
    conn.close()
    
    if not debts:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤.")
        return
    
    message = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–ª–≥–∏:\n\n"
    for amount, due_date, creation_date in debts:
        message += (
            f"–°—É–º–º–∞: {amount:.2f}\n"
            f"–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {due_date}\n"
            f"–î–∞—Ç–∞ –≤–∑—è—Ç–∏—è: {creation_date}\n\n"
        )
    
    update.message.reply_text(message)

def process_borrow(update: Update, user_id: int, text: str):
    try:
        parts = text.split()
        amount = float(parts[1])
        due_date_index = parts.index('–¥–æ') + 1
        due_date = parts[due_date_index]
        
        day, month = map(int, due_date.split('.'))
        if not (1 <= day <= 31 and 1 <= month <= 12):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
        
        total_balance = get_total_balance()
        if amount > total_balance:
            update.message.reply_text(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –æ–±—â–µ–º –±–∞–ª–∞–Ω—Å–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∑–∞–π–º–∞: {total_balance:.2f}"
            )
            return
        
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''
        INSERT INTO debts (user_id, amount, due_date, creation_date)
        VALUES (?, ?, ?, ?)
        ''', (user_id, amount, due_date, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        
        cursor.execute('UPDATE savings SET balance = balance - ? WHERE user_id = ?', (amount, user_id))
        
        conn.commit()
        conn.close()
        
        update.message.reply_text(
            f"–í—ã –≤–∑—è–ª–∏ –≤ –¥–æ–ª–≥ {amount:.2f} –¥–æ {due_date}. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_balance(user_id):.2f}"
        )
    except (ValueError, IndexError) as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: '–±–µ—Ä—É 500 –¥–æ 15.07'")

def process_return(update: Update, user_id: int, text: str):
    try:
        parts = text.split()
        amount = float(parts[1])
        due_date_index = parts.index('–∑–∞') + 1
        due_date = parts[due_date_index]
        
        day, month = map(int, due_date.split('.'))
        if not (1 <= day <= 31 and 1 <= month <= 12):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
        
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''
        SELECT debt_id, amount FROM debts 
        WHERE user_id = ? AND due_date = ? AND status = 'active'
        ''', (user_id, due_date))
        
        debt = cursor.fetchone()
        
        if not debt:
            update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–ª–≥ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞.")
            conn.close()
            return
            
        debt_id, debt_amount = debt
        
        if amount > debt_amount:
            update.message.reply_text(f"–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å—É–º–º—É –¥–æ–ª–≥–∞ ({debt_amount:.2f})")
            conn.close()
            return
        
        if amount == debt_amount:
            cursor.execute('UPDATE debts SET status = "returned" WHERE debt_id = ?', (debt_id,))
        else:
            cursor.execute('UPDATE debts SET amount = amount - ? WHERE debt_id = ?', (amount, debt_id))
        
        cursor.execute('UPDATE savings SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
        
        conn.commit()
        conn.close()
        
        update.message.reply_text(
            f"–í—ã –≤–µ—Ä–Ω—É–ª–∏ {amount:.2f} –∑–∞ {due_date}. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_balance(user_id):.2f}"
        )
    except (ValueError, IndexError) as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: '–≤–æ–∑–≤—Ä–∞—â–∞—é 500 –∑–∞ 15.07'")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_text(update: Update, context: CallbackContext):
    text = update.message.text.lower()
    user_id = update.effective_user.id
    
    if text.startswith('–±–µ—Ä—É') and '–¥–æ' in text:
        process_borrow(update, user_id, text)
    elif text.startswith('–≤–æ–∑–≤—Ä–∞—â–∞—é') and '–∑–∞' in text:
        process_return(update, user_id, text)
    elif text.startswith('–≤–Ω–æ—à—É') or text.startswith('—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∑–Ω–æ—Å'):
        process_contribution(update, user_id, text)

def main():
    init_db()
    
    # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    TOKEN = os.environ.get('BOT_TOKEN')
    updater = Updater(TOKEN, use_context=True)
    
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.regex('^üëÄ –ú–æ–π –±–∞–ª–∞–Ω—Å$'), my_balance))
    dp.add_handler(MessageHandler(Filters.regex('^üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å$'), total_balance))
    dp.add_handler(MessageHandler(Filters.regex('^üéØ –í–Ω–µ—Å—Ç–∏ –≤ –∫–æ–ø–∏–ª–∫—É$'), add_contribution))
    dp.add_handler(MessageHandler(Filters.regex('^üí∏ –ú–æ–∏ –≤–∑–Ω–æ—Å—ã$'), my_contributions))
    dp.add_handler(MessageHandler(Filters.regex('^üç™ –í–∑—è—Ç—å –≤ –¥–æ–ª–≥$'), borrow_money))
    dp.add_handler(MessageHandler(Filters.regex('^üí™ –í–µ—Ä–Ω—É—Ç—å –¥–æ–ª–≥$'), return_debt))
    dp.add_handler(MessageHandler(Filters.regex('^üîî –ú–æ–∏ –¥–æ–ª–≥–∏$'), my_debts))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))
    
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()