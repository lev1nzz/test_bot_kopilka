import os
from dotenv import load_dotenv
load_dotenv()

import sqlite3
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext


ADMINS = [1079919031]


DB_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'savings_bot.db')


def is_admin(user_id):
    return user_id in ADMINS


def init_db():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        join_date TEXT
    )''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–ø–∏–ª–æ–∫ (–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π)
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS savings (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        balance REAL DEFAULT 0,
        monthly_contribution REAL DEFAULT 0,
        FOREIGN KEY (user_id) REFERENCES users(user_id)
    )''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–≥–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS debts (
        debt_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        username TEXT,
        amount REAL,
        due_date TEXT,
        status TEXT DEFAULT 'active',
        creation_date TEXT,
        FOREIGN KEY (user_id) REFERENCES users(user_id)
    )''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –≤–∑–Ω–æ—Å–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS contributions (
        contribution_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        username TEXT,
        amount REAL,
        month_year TEXT,
        contribution_date TEXT,
        FOREIGN KEY (user_id) REFERENCES users(user_id)
    )''')
    
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è /start
def add_user(user_id, username, first_name, last_name):
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute('SELECT 1 FROM users WHERE user_id = ?', (user_id,))
    if not cursor.fetchone():
        cursor.execute('''
        INSERT INTO users (user_id, username, first_name, last_name, join_date)
        VALUES (?, ?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        
        cursor.execute('''
        INSERT INTO savings (user_id, username, balance, monthly_contribution)
        VALUES (?, ?, 0, 0)
        ''', (user_id, username))
        
        conn.commit()
    
    conn.close()
    
    
# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    add_user(user.id, user.username, user.first_name, user.last_name)
    
    keyboard = [
        [KeyboardButton("üëÄ –ú–æ–π –±–∞–ª–∞–Ω—Å"), KeyboardButton("üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å")],
        [KeyboardButton("üéØ –í–Ω–µ—Å—Ç–∏ –≤ –∫–æ–ø–∏–ª–∫—É"), KeyboardButton("üí∏ –ú–æ–∏ –≤–∑–Ω–æ—Å—ã")],
        [KeyboardButton("üç™ –í–∑—è—Ç—å –≤ –¥–æ–ª–≥"), KeyboardButton("üîî –ú–æ–∏ –¥–æ–ª–≥–∏")],
        [KeyboardButton("üí™ –í–µ—Ä–Ω—É—Ç—å –¥–æ–ª–≥"), KeyboardButton(" üîê –ê–¥–º–∏–Ω–∫–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∫–æ–ø–∏–ª–∫–∏ –ß–ï–õ–û–í.\n"
        "üì≤ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º
def get_user_balance(user_id):
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT balance FROM savings WHERE user_id = ?', (user_id,))
    balance = cursor.fetchone()[0]
    conn.close()
    return balance

def get_total_balance():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT SUM(balance) FROM savings')
    total = cursor.fetchone()[0] or 0
    conn.close()
    return total

def my_balance(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT balance, monthly_contribution FROM savings WHERE user_id = ?', (user_id,))
    balance, monthly_contribution = cursor.fetchone()
    conn.close()
    
    update.message.reply_text(
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f}\n"
        f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å: {monthly_contribution:.2f}"
    )

def total_balance(update: Update, context: CallbackContext):
    total = get_total_balance()
    update.message.reply_text(f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total:.2f}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ø–∏–ª–∫–æ–π
def add_contribution(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ß—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –≤ –∫–æ–ø–∏–ª–∫—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "'–≤–Ω–æ—à—É [—Å—É–º–º–∞] –∑–∞ [–º–º.–≥–≥–≥–≥]'\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–≤–Ω–æ—à—É 3000 –∑–∞ 07.2023'\n"
        "–ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å:\n"
        "'—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∑–Ω–æ—Å [—Å—É–º–º–∞]'\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∑–Ω–æ—Å 3000'"
    )

def my_contributions(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT amount, month_year, contribution_date FROM contributions 
    WHERE user_id = ?
    ORDER BY contribution_date DESC
    LIMIT 10
    ''', (user_id,))
    
    contributions = cursor.fetchall()
    
    cursor.execute('SELECT monthly_contribution FROM savings WHERE user_id = ?', (user_id,))
    monthly_contribution = cursor.fetchone()[0]
    
    conn.close()
    
    message = f"–í–∞—à —Ç–µ–∫—É—â–∏–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å: {monthly_contribution:.2f}\n\n"
    message += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤–∑–Ω–æ—Å–æ–≤:\n"
    
    if not contributions:
        message += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∑–Ω–æ—Å–æ–≤."
    else:
        for amount, month_year, contribution_date in contributions:
            message += (
                f"{amount:.2f} –∑–∞ {month_year} (–≤–Ω–µ—Å–µ–Ω–æ {contribution_date.split()[0]})\n"
            )
    
    update.message.reply_text(message)

def process_contribution(update: Update, user_id: int, text: str):
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        cursor = conn.cursor()
        
         # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        cursor.execute('SELECT username FROM users WHERE user_id = ?', (user_id,))
        user_data = cursor.fetchone()
        username = user_data[0] if user_data else None
        
        if text.startswith('—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∑–Ω–æ—Å'):
            amount = float(text.split()[2])
            conn = sqlite3.connect(DB_PATH, check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute('UPDATE savings SET monthly_contribution = ? WHERE user_id = ?', (amount, user_id))
            conn.commit()
            conn.close()
            update.message.reply_text(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å: {amount:.2f}")
        elif '–∑–∞' in text:
            parts = text.split()
            amount = float(parts[1])
            month_year_index = parts.index('–∑–∞') + 1
            month_year = parts[month_year_index]
            
            month, year = map(int, month_year.split('.'))
            if not (1 <= month <= 12 and year >= 2020):
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
            
            conn = sqlite3.connect('savings_bot.db', check_same_thread=False)
            cursor = conn.cursor()
            
            cursor.execute('''
            INSERT INTO contributions (user_id, username, amount, month_year, contribution_date)
            VALUES (?, ?, ?, ?, ?)
            ''', (user_id, username, amount, month_year, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
            
            cursor.execute('UPDATE savings SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
            
            conn.commit()
            conn.close()
            
            update.message.reply_text(
                f"–í—ã –≤–Ω–µ—Å–ª–∏ {amount:.2f} –∑–∞ {month_year}. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_balance(user_id):.2f}"
            )
    except (ValueError, IndexError) as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        update.message.reply_text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä—ã:\n"
            "'–≤–Ω–æ—à—É 3000 –∑–∞ 07.2023'\n"
            "'—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∑–Ω–æ—Å 3000'"
        )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–ª–≥–∞–º–∏
def borrow_money(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ß—Ç–æ–±—ã –≤–∑—è—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –¥–æ–ª–≥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "'–±–µ—Ä—É [—Å—É–º–º–∞] –¥–æ [–¥–¥.–º–º]'\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–±–µ—Ä—É 500 –¥–æ 15.07'"
    )

def return_debt(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –¥–æ–ª–≥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "'–≤–æ–∑–≤—Ä–∞—â–∞—é [—Å—É–º–º–∞] –∑–∞ [–¥–¥.–º–º]'\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–≤–æ–∑–≤—Ä–∞—â–∞—é 500 –∑–∞ 15.07'"
    )

def my_debts(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    conn = sqlite3.connect('savings_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT amount, due_date, creation_date FROM debts 
    WHERE user_id = ? AND status = 'active'
    ORDER BY due_date
    ''', (user_id,))
    
    debts = cursor.fetchall()
    conn.close()
    
    if not debts:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤.")
        return
    
    message = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–ª–≥–∏:\n\n"
    for amount, due_date, creation_date in debts:
        message += (
            f"–°—É–º–º–∞: {amount:.2f}\n"
            f"–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {due_date}\n"
            f"–î–∞—Ç–∞ –≤–∑—è—Ç–∏—è: {creation_date}\n\n"
        )
    
    update.message.reply_text(message)

def process_borrow(update: Update, user_id: int, text: str):
    try:
        parts = text.split()
        amount = float(parts[1])
        due_date_index = parts.index('–¥–æ') + 1
        due_date = parts[due_date_index]
        
        day, month = map(int, due_date.split('.'))
        if not (1 <= day <= 31 and 1 <= month <= 12):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
        
        total_balance = get_total_balance()
        if amount > total_balance:
            update.message.reply_text(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –æ–±—â–µ–º –±–∞–ª–∞–Ω—Å–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∑–∞–π–º–∞: {total_balance:.2f}"
            )
            return
        
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        cursor.execute('SELECT username FROM users WHERE user_id = ?', (user_id,))
        user_data = cursor.fetchone()
        username = user_data[0] if user_data else None
        
        
        cursor.execute('''
        INSERT INTO debts (user_id, username, amount, due_date, creation_date)
        VALUES (?, ?, ?, ?, ?)
        ''', (user_id, username, amount, due_date, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        
        cursor.execute('UPDATE savings SET balance = balance - ? WHERE user_id = ?', (amount, user_id))
        
        conn.commit()
        conn.close()
        
        update.message.reply_text(
            f"–í—ã –≤–∑—è–ª–∏ –≤ –¥–æ–ª–≥ {amount:.2f} –¥–æ {due_date}. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_balance(user_id):.2f}"
        )
    except (ValueError, IndexError) as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: '–±–µ—Ä—É 500 –¥–æ 15.07'")

def process_return(update: Update, user_id: int, text: str):
    try:
        parts = text.split()
        amount = float(parts[1])
        due_date_index = parts.index('–∑–∞') + 1
        due_date = parts[due_date_index]
        
        day, month = map(int, due_date.split('.'))
        if not (1 <= day <= 31 and 1 <= month <= 12):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
        
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''
        SELECT debt_id, amount FROM debts 
        WHERE user_id = ? AND due_date = ? AND status = 'active'
        ''', (user_id, due_date))
        
        debt = cursor.fetchone()
        
        if not debt:
            update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–ª–≥ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞.")
            conn.close()
            return
            
        debt_id, debt_amount = debt
        
        if amount > debt_amount:
            update.message.reply_text(f"–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å—É–º–º—É –¥–æ–ª–≥–∞ ({debt_amount:.2f})")
            conn.close()
            return
        
        if amount == debt_amount:
            cursor.execute('UPDATE debts SET status = "returned" WHERE debt_id = ?', (debt_id,))
        else:
            cursor.execute('UPDATE debts SET amount = amount - ? WHERE debt_id = ?', (amount, debt_id))
        
        cursor.execute('UPDATE savings SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
        
        conn.commit()
        conn.close()
        
        update.message.reply_text(
            f"–í—ã –≤–µ—Ä–Ω—É–ª–∏ {amount:.2f} –∑–∞ {due_date}. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_balance(user_id):.2f}"
        )
    except (ValueError, IndexError) as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: '–≤–æ–∑–≤—Ä–∞—â–∞—é 500 –∑–∞ 15.07'")


def admin_panel(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    keyboard = [
        [KeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
        [KeyboardButton("üìä –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"), KeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –≤–∑–Ω–æ—Å")],
        [KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤"), KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ª–≥")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        "üëÆ‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

def list_users(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.id):
        return
    
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, username, first_name, last_name, join_date FROM users')
    users = cursor.fetchall()
    conn.close()
    
    message = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user_id, username, first_name, last_name, join_date in users:
        balance = get_user_balance(user_id)
        message += (
            f"ID: {user_id}\n"
            f"–ò–º—è: {first_name} {last_name}\n"
            f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n"
            f"–ë–∞–ª–∞–Ω—Å: {balance:.2f}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {join_date}\n\n"
        )
    
    update.message.reply_text(message)

def change_balance(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.id):
        return
    
    update.message.reply_text(
        "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "'–±–∞–ª–∞–Ω—Å [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [–Ω–æ–≤–∞—è —Å—É–º–º–∞]'\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–±–∞–ª–∞–Ω—Å 123456789 5000'"
    )

def process_balance_change(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.id):
        return
    
    try:
        parts = update.message.text.split()
        user_id = int(parts[1])
        new_balance = float(parts[2])
        
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('UPDATE savings SET balance = ? WHERE user_id = ?', (new_balance, user_id))
        conn.commit()
        conn.close()
        
        update.message.reply_text(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_balance:.2f}")
    except (IndexError, ValueError) as e:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: '–±–∞–ª–∞–Ω—Å 123456789 5000'")

def change_contribution(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.id):
        return
    
    update.message.reply_text(
        "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "'–≤–∑–Ω–æ—Å [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [–Ω–æ–≤–∞—è —Å—É–º–º–∞]'\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–≤–∑–Ω–æ—Å 123456789 3000'"
    )

def process_contribution_change(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.id):
        return
    
    try:
        parts = update.message.text.split()
        user_id = int(parts[1])
        new_contribution = float(parts[2])
        
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('UPDATE savings SET monthly_contribution = ? WHERE user_id = ?', (new_contribution, user_id))
        conn.commit()
        conn.close()
        
        update.message.reply_text(f"‚úÖ –í–∑–Ω–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_contribution:.2f}")
    except (IndexError, ValueError) as e:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: '–≤–∑–Ω–æ—Å 123456789 3000'")

def list_debts(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.id):
        return
    
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
    SELECT d.debt_id, d.user_id, u.first_name, u.last_name, d.amount, d.due_date, d.status 
    FROM debts d
    JOIN users u ON d.user_id = u.user_id
    ORDER BY d.status, d.due_date
    ''')
    
    debts = cursor.fetchall()
    conn.close()
    
    if not debts:
        update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤.")
        return
    
    message = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–ª–≥–æ–≤:\n\n"
    for debt_id, user_id, first_name, last_name, amount, due_date, status in debts:
        message += (
            f"ID –¥–æ–ª–≥–∞: {debt_id}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} {last_name} (ID: {user_id})\n"
            f"–°—É–º–º–∞: {amount:.2f}\n"
            f"–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {due_date}\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ü–æ–≥–∞—à–µ–Ω' if status == 'returned' else '‚ö†Ô∏è –ê–∫—Ç–∏–≤–µ–Ω'}\n\n"
        )
    
    update.message.reply_text(message)

def edit_debt(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.id):
        return
    
    update.message.reply_text(
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–≥–∞:\n"
        "1. –ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–∑–∞–∫—Ä—ã—Ç—å [ID –¥–æ–ª–≥–∞]'\n"
        "2. –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–æ–ª–≥ [ID –¥–æ–ª–≥–∞] [–Ω–æ–≤–∞—è —Å—É–º–º–∞]'\n"
        "3. –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞—Ç–∞ [ID –¥–æ–ª–≥–∞] [–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º]'\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "'–∑–∞–∫—Ä—ã—Ç—å 1'\n"
        "'–¥–æ–ª–≥ 1 1500'\n"
        "'–¥–∞—Ç–∞ 1 30.12'"
    )

def process_debt_edit(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.id):
        return
    
    try:
        text = update.message.text.lower().strip()
        parts = text.split()
        if len(parts) < 2:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
            
        action = parts[0]
        debt_id = int(parts[1])
        
        conn = None
        try:
            conn = sqlite3.connect(DB_PATH, check_same_thread=False)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–æ–ª–≥–∞
            cursor.execute('SELECT 1 FROM debts WHERE debt_id = ?', (debt_id,))
            if not cursor.fetchone():
                update.message.reply_text(f"‚ùå –î–æ–ª–≥ —Å ID {debt_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            if action == '–∑–∞–∫—Ä—ã—Ç—å':
                cursor.execute('UPDATE debts SET status = "returned" WHERE debt_id = ?', (debt_id,))
                conn.commit()
                update.message.reply_text(f"‚úÖ –î–æ–ª–≥ {debt_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–≥–∞—à–µ–Ω–Ω—ã–π")
                
            elif action == '–¥–æ–ª–≥':
                if len(parts) < 3:
                    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞")
                new_amount = float(parts[2])
                cursor.execute('UPDATE debts SET amount = ? WHERE debt_id = ?', (new_amount, debt_id))
                conn.commit()
                update.message.reply_text(f"‚úÖ –°—É–º–º–∞ –¥–æ–ª–≥–∞ {debt_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_amount:.2f}")
                
            elif action == '–¥–∞—Ç–∞':
                if len(parts) < 3:
                    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞")
                new_date = parts[2]
                try:
                    day, month = map(int, new_date.split('.'))
                    if not (1 <= day <= 31 and 1 <= month <= 12):
                        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
                except:
                    raise ValueError("–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä 30.12)")
                
                cursor.execute('UPDATE debts SET due_date = ? WHERE debt_id = ?', (new_date, debt_id))
                conn.commit()
                update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ –¥–æ–ª–≥–∞ {debt_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_date}")
                
            else:
                update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∑–∞–∫—Ä—ã—Ç—å, –¥–æ–ª–≥ –∏–ª–∏ –¥–∞—Ç–∞")
                
        except sqlite3.Error as e:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        finally:
            if conn:
                conn.close()
                
    except (IndexError, ValueError) as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü—Ä–∏–º–µ—Ä—ã:\n'–∑–∞–∫—Ä—ã—Ç—å 1'\n'–¥–æ–ª–≥ 1 1500'\n'–¥–∞—Ç–∞ 1 30.12'")

def back_to_main(update: Update, context: CallbackContext):
    user = update.effective_user
    keyboard = [
        [KeyboardButton("üëÄ –ú–æ–π –±–∞–ª–∞–Ω—Å"), KeyboardButton("üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å")],
        [KeyboardButton("üéØ –í–Ω–µ—Å—Ç–∏ –≤ –∫–æ–ø–∏–ª–∫—É"), KeyboardButton("üí∏ –ú–æ–∏ –≤–∑–Ω–æ—Å—ã")],
        [KeyboardButton("üç™ –í–∑—è—Ç—å –≤ –¥–æ–ª–≥"), KeyboardButton("üîî –ú–æ–∏ –¥–æ–ª–≥–∏")],
        [KeyboardButton("üí™ –í–µ—Ä–Ω—É—Ç—å –¥–æ–ª–≥"), KeyboardButton("üîê –ê–¥–º–∏–Ω–∫–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, {user.first_name}!",
        reply_markup=reply_markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_text(update: Update, context: CallbackContext):
    text = update.message.text.lower()
    user_id = update.effective_user.id
    
    if is_admin(user_id):
        if text.startswith(('–∑–∞–∫—Ä—ã—Ç—å ', '–¥–æ–ª–≥ ', '–¥–∞—Ç–∞ ')):
            process_debt_edit(update, context)
            return
        
        
    if is_admin(user_id):
        if text.startswith(('–±–∞–ª–∞–Ω—Å')):
            process_balance_change(update, context)
            return
    
    
    if is_admin(user_id):
        if text.startswith(('–≤–∑–Ω–æ—Å')):
            process_contribution_change(update, context)
            return
    
    
    if text.startswith('–±–µ—Ä—É') and '–¥–æ' in text:
        process_borrow(update, user_id, text)
    elif text.startswith('–≤–æ–∑–≤—Ä–∞—â–∞—é') and '–∑–∞' in text:
        process_return(update, user_id, text)
    elif text.startswith('–≤–Ω–æ—à—É') or text.startswith('—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∑–Ω–æ—Å'):
        process_contribution(update, user_id, text)
    elif is_admin(user_id):
        if text == 'üë• —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
            list_users(update, context)
        elif text == 'üìä –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å':
            change_balance(update, context)
        elif text == 'üìù –∏–∑–º–µ–Ω–∏—Ç—å –≤–∑–Ω–æ—Å':
            change_contribution(update, context)
        elif text == 'üìã —Å–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤':
            list_debts(update, context)
        elif text == '‚úèÔ∏è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ª–≥':
            edit_debt(update, context)
        elif text == 'üîô –Ω–∞–∑–∞–¥':
            back_to_main(update, context)
    else:
        update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
            
def main():
    init_db()

    
    TOKEN = os.environ.get('BOT_TOKEN')
    if not TOKEN:
        print("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    updater = Updater(TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dispatcher.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    dispatcher.add_handler(MessageHandler(Filters.regex('^üëÄ –ú–æ–π –±–∞–ª–∞–Ω—Å$'), my_balance))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å$'), total_balance))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üéØ –í–Ω–µ—Å—Ç–∏ –≤ –∫–æ–ø–∏–ª–∫—É$'), add_contribution))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üí∏ –ú–æ–∏ –≤–∑–Ω–æ—Å—ã$'), my_contributions))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üç™ –í–∑—è—Ç—å –≤ –¥–æ–ª–≥$'), borrow_money))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üí™ –í–µ—Ä–Ω—É—Ç—å –¥–æ–ª–≥$'), return_debt))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üîî –ú–æ–∏ –¥–æ–ª–≥–∏$'), my_debts))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üîê –ê–¥–º–∏–Ω–∫–∞$'), admin_panel))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π$'), list_users))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üìä –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å$'), change_balance))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üìù –ò–∑–º–µ–Ω–∏—Ç—å –≤–∑–Ω–æ—Å$'), change_contribution))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üìã –°–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤$'), list_debts))
    dispatcher.add_handler(MessageHandler(Filters.regex('^‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ª–≥$'), edit_debt))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üîô –ù–∞–∑–∞–¥$'), back_to_main))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    dispatcher.add_handler(CommandHandler("balance", process_balance_change))
    dispatcher.add_handler(CommandHandler("vznos", process_contribution_change))
    dispatcher.add_handler(CommandHandler("zakrit", process_debt_edit))
    dispatcher.add_handler(CommandHandler("dolg", process_debt_edit))
    dispatcher.add_handler(CommandHandler("data", process_debt_edit))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))
    
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()           
